diff -ur ../orig/MG5_aMC_v2_3_0_beta/madgraph/interface/common_run_interface.py MG5_aMC_v2_3_0_beta/madgraph/interface/common_run_interface.py
--- ../orig/MG5_aMC_v2_3_0_beta/madgraph/interface/common_run_interface.py	2015-04-10 11:56:28.000000001 +0200
+++ MG5_aMC_v2_3_0_beta/madgraph/interface/common_run_interface.py	2015-05-22 16:45:28.000000001 +0200
@@ -1295,7 +1295,7 @@
     def get_pdf_input_filename(self):
         """return the name of the file which is used by the pdfset"""
 
-        if self.options["cluster_local_path"] and self.options['run_mode'] ==1:
+        if self.options["cluster_local_path"] and os.path.exists(self.options["cluster_local_path"]) and self.options['run_mode'] ==1:
             # no need to transfer the pdf.
             return ''
         
diff -ur ../orig/MG5_aMC_v2_3_0_beta/madgraph/interface/madevent_interface.py MG5_aMC_v2_3_0_beta/madgraph/interface/madevent_interface.py
--- ../orig/MG5_aMC_v2_3_0_beta/madgraph/interface/madevent_interface.py	2015-04-10 11:56:28.000000001 +0200
+++ MG5_aMC_v2_3_0_beta/madgraph/interface/madevent_interface.py	2015-05-22 17:52:24.000000001 +0200
@@ -3099,6 +3099,8 @@
         """Advanced commands: Create gridpack from present run"""
 
         self.update_status('Creating gridpack', level='parton')
+        # compile gen_ximprove
+        misc.compile(['../bin/internal/gen_ximprove'], cwd=pjoin(self.me_dir, "Source"))
         args = self.split_arg(line)
         self.check_combine_events(args)
         if not self.run_tag: self.run_tag = 'tag_1'
diff -ur ../orig/MG5_aMC_v2_3_0_beta/madgraph/various/cluster.py MG5_aMC_v2_3_0_beta/madgraph/various/cluster.py
--- ../orig/MG5_aMC_v2_3_0_beta/madgraph/various/cluster.py	2015-04-10 11:56:28.000000001 +0200
+++ MG5_aMC_v2_3_0_beta/madgraph/various/cluster.py	2015-04-28 20:29:30.000000001 +0200
@@ -19,6 +19,11 @@
 import glob
 import inspect
 import sys
+import platform
+import signal
+import uuid
+import socket
+import atexit
 
 logger = logging.getLogger('madgraph.cluster') 
 
@@ -83,6 +88,10 @@
     else:
         return True
 
+def cleansubproc(subproc):
+    #print "killing %s" % subproc
+    subproc.terminate()
+
 class Cluster(object):
     """Basic Class for all cluster type submission"""
     name = 'mother class'
@@ -412,6 +421,7 @@
             file missing: %s.
             Stopping all runs.''' % (job_id, args, path))
             #self.remove()
+            raise ClusterManagmentError('Job exhausted all retries.')
         elif args['nb_submit'] >= self.nb_retry:
             logger.critical('''Fail to run correctly job %s.
             with option: %s
@@ -419,6 +429,7 @@
             Fails %s times
             No resubmition. ''' % (job_id, args, path, args['nb_submit']))
             #self.remove()
+            raise ClusterManagmentError('Job exhausted all retries.')
         else:
             args['nb_submit'] += 1            
             logger.warning('resubmit job (for the %s times)' % args['nb_submit'])
@@ -1325,6 +1336,80 @@
     name = 'lsf'
     job_id = 'LSB_JOBID'
 
+    def __init__(self,*args, **opts):
+        """Init the cluster"""
+        Cluster.__init__(self,*args, **opts)
+
+        if self.temp_dir!=None:
+            self.dorsync = True
+            #print "starting rsync"
+          
+            cwd = os.getcwd()
+
+            self.rsyncroot = cwd
+            
+            self.rsyncmodule = str(uuid.uuid4())
+            
+            #get free port number for rsyncd
+            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            sock.bind(('localhost', 0))
+            addr, port = sock.getsockname()
+            sock.close()    
+            
+            self.rsyncport = port
+            #print self.rsyncport
+            
+            rsynclog = os.path.join(cwd, 'rsyncd_%i.log' % self.rsyncport)
+            rsynclock = os.path.join(cwd, 'rsyncd_%i.lock' % self.rsyncport)
+            rsyncpid = os.path.join(cwd, 'rsyncd_%i.pid' % self.rsyncport)
+
+            rsyncpasswd = str(uuid.uuid4())
+            
+            self.rsyncuser = 'madgraph'
+            
+            rsyncsecrets = "%s:%s" % (self.rsyncuser,rsyncpasswd)
+            rsyncsecretsfile = os.path.join(cwd, 'rsyncsecrets_%i' % self.rsyncport)
+            secretsh = open(rsyncsecretsfile,'w')
+            os.chmod(rsyncsecretsfile, 0600)
+            secretsh.write(rsyncsecrets)
+          
+            os.environ["MADGRAPHRSYNCPASSWD_%i" % self.rsyncport] = rsyncpasswd
+            #print rsyncpasswd
+
+            rsyncconf = """
+              port = %(rsyncport)s
+              pid file = %(rsyncpid)s
+              log file = %(rsynclog)s
+             
+                [%(rsyncmodule)s]
+                  comment = Random things available for download
+                  lock file = %(rsynclock)s
+                  secrets file = %(rsyncsecrets)s
+                  path = %(path)s
+                  list = yes 
+                  use chroot = no
+                  munge symlinks = no
+                  read only = no
+                  auth users = %(rsyncuser)s
+            """ % {'rsyncport': self.rsyncport,
+                   'rsyncmodule': self.rsyncmodule,
+                   'path': cwd,
+                  'rsynclog' : rsynclog,
+                  'rsynclock' : rsynclock,
+                  'rsyncpid' : rsyncpid,
+                  'rsyncsecrets' : rsyncsecretsfile,
+                  'rsyncuser' : self.rsyncuser,
+                  }
+            
+            rsyncconffile = os.path.join(cwd, 'rsyncd_%i.conf' % self.rsyncport)
+            open(rsyncconffile,'w').write(rsyncconf)
+            
+            self.rsyncd = subprocess.Popen(['rsync','--daemon', '--no-detach', '--config=%s' % rsyncconffile],cwd=cwd,stdout=subprocess.PIPE,stdin=subprocess.PIPE,stderr=subprocess.PIPE)
+            atexit.register(cleansubproc,self.rsyncd)
+            
+        else:
+            self.dorsync = False
+
     @multiple_try()
     def submit(self, prog, argument=[], cwd=None, stdout=None, stderr=None, log=None,
                required_output=[], nb_submit=0):
@@ -1348,6 +1433,8 @@
         if log is None:
             log = '/dev/null'
         
+        text += 'if [ -n $CMSSW_BASE ]; then cd $CMSSW_BASE; eval `scramv1 runtime -sh`; cd -; fi;'
+        
         text += prog
         if argument:
             text += ' ' + ' '.join(argument)
@@ -1373,6 +1460,135 @@
         self.submitted_ids.append(id)
         return id        
         
+    @store_input()
+    @multiple_try()
+    def submit2(self, prog, argument=[], cwd=None, stdout=None, stderr=None,
+            log=None, input_files=[], output_files=[], required_output=[],nb_submit=0):
+        """How to make one submission. Return status id on the cluster.
+        NO SHARE DISK"""
+
+        #print "running lsf submit2"
+
+        if cwd is None:
+            cwd = os.getcwd()
+        if not os.path.exists(prog):
+            prog = os.path.join(cwd, prog)
+
+        if not required_output and output_files:
+            required_output = output_files
+
+        if not self.dorsync or (not input_files and not output_files):
+            # not input/output so not using submit2
+            return self.submit(prog, argument, cwd, stdout, stderr, log,
+        required_output=required_output, nb_submit=nb_submit)
+
+        if self.rsyncd.poll()!=None:
+            raise RuntimeError("rsyncd not running")
+
+        if cwd is None:
+            cwd = os.getcwd()
+        if not os.path.exists(prog):
+            prog = os.path.join(cwd, prog)
+        temp_file_name = "sub." + os.path.basename(prog) + '.'.join(argument)
+               
+        input_files.append(prog)                
+               
+        hostname = platform.node()
+               
+        rsynccwd = cwd
+        if rsynccwd.startswith(self.rsyncroot):
+            rsynccwd = rsynccwd[len(self.rsyncroot):]                   
+               
+        infilelist = ""
+        for input_file in input_files:
+            #make sure input_files are absolute paths
+            if not input_file.startswith('/'):
+                input_file = os.path.join(cwd,input_file)
+            #convert to paths relative to rsyncd root
+            if input_file.startswith(self.rsyncroot):
+                input_file = input_file[len(self.rsyncroot):]
+            infilelist += "%s@%s::%s/%s " % (self.rsyncuser,hostname,self.rsyncmodule, input_file)
+        infilelist += "./"
+        
+        outfilelist = ""
+        for output_file in output_files:
+            outfilelist += "%s " % (output_file)
+        outfilelist += "%s@%s::%s/%s" % (self.rsyncuser,hostname,self.rsyncmodule,rsynccwd)
+            
+        text = """#!/bin/bash
+        
+            SUBMITTERHOST=%(hostname)s            
+
+            if [ -n $CMSSW_VERSION ]
+            then
+              scramv1 project CMSSW $CMSSW_VERSION
+              cd $CMSSW_VERSION
+              eval `scramv1 runtime -sh`
+              cd -
+            fi
+                             
+            export RSYNC_PASSWORD=$MADGRAPHRSYNCPASSWD_%(rsyncport)s
+                 
+            #dereference symlinks for input
+            rsync -vvv --timeout=60 --contimeout=60 --port %(rsyncport)s -rptL %(infilelist)s
+
+            echo '%(arguments)s' > arguments
+            chmod +x ./%(script)s        
+            %(program)s ./%(script)s %(arguments)s
+            
+            #copy symlinks as symlinks for output and don't overwrite existing files unless updated
+            rsync -vvv --timeout=60 --contimeout=60 --port %(rsyncport)s -rptul %(outfilelist)s
+            
+            """
+        dico = {'script': os.path.basename(prog),
+        'hostname': hostname,
+        'infilelist': infilelist,
+        'outfilelist': outfilelist,
+        'output_files': ' '.join(output_files),
+        'rsyncport': self.rsyncport,
+        'arguments': ' '.join([str(a) for a in argument]),
+        'program': ' ' if '.py' in prog else 'bash'}
+
+        me_dir = self.get_jobs_identifier(cwd, prog)
+
+        text = text % dico
+        command = ['bsub', '-cwd', '/tmp/$USER', '-C0', '-J', me_dir]
+        if cwd is None:
+            cwd = os.getcwd()
+        #else:
+            #text += " cd %s;" % cwd
+        if stdout and isinstance(stdout, str):
+            command.extend(['-o', stdout])
+        if stderr and isinstance(stdout, str):
+            command.extend(['-e', stderr])
+        elif stderr == -2: # -2 is subprocess.STDOUT
+            pass
+        if log is None:
+            log = '/dev/null'
+
+        if self.cluster_queue and self.cluster_queue != 'None':
+            command.extend(['-q', self.cluster_queue])
+
+        submitenv = os.environ.copy()
+        submitenv["TMPDIR"] = "/tmp/" + submitenv.get("USER", '')
+        a = misc.Popen(command, stdout=subprocess.PIPE,
+        stderr=subprocess.STDOUT,
+        stdin=subprocess.PIPE, cwd=cwd,
+        env=submitenv)
+
+        output = a.communicate(text)[0]
+        #Job <nnnn> is submitted to default queue <normal>.
+        try:
+            id = output.split('>',1)[0].split('<')[1]
+        except:
+            raise ClusterManagmentError, 'fail to submit to the cluster: \n%s' \
+            % output
+        if not id.isdigit():
+            raise ClusterManagmentError, 'fail to submit to the cluster: \n%s' \
+            % output
+        self.submitted += 1
+        self.submitted_ids.append(id)
+        return id         
         
     @multiple_try()
     def control_one_job(self, id):
diff -ur ../orig/MG5_aMC_v2_3_0_beta/MadSpin/interface_madspin.py MG5_aMC_v2_3_0_beta/MadSpin/interface_madspin.py
--- ../orig/MG5_aMC_v2_3_0_beta/MadSpin/interface_madspin.py	2015-04-10 11:56:28.000000001 +0200
+++ MG5_aMC_v2_3_0_beta/MadSpin/interface_madspin.py	2015-05-23 17:14:49.000000001 +0200
@@ -578,6 +578,9 @@
 
         #replace init information
         generate_all.banner['init'] = self.banner['init']
+        #replace run card if present in header (to make sure correct random seed is recorded in output file)
+        if 'mgruncard' in self.banner:
+            generate_all.banner['mgruncard'] = self.banner['mgruncard']
         
         # NOW we have all the information available for RUNNING
         
@@ -590,7 +593,10 @@
         
         generate_all.ending_run()
         self.branching_ratio = generate_all.branching_ratio
-        self.err_branching_ratio = generate_all.err_branching_ratio 
+        try:
+            self.err_branching_ratio = generate_all.err_branching_ratio
+        except Exception:
+            self.err_branching_ratio = 0
         evt_path = self.events_file.name
         try:
             self.events_file.close()
diff -ur ../orig/MG5_aMC_v2_3_0_beta/Template/LO/bin/internal/Gridpack/run.sh MG5_aMC_v2_3_0_beta/Template/LO/bin/internal/Gridpack/run.sh
--- ../orig/MG5_aMC_v2_3_0_beta/Template/LO/bin/internal/Gridpack/run.sh	2015-04-10 11:56:28.000000001 +0200
+++ MG5_aMC_v2_3_0_beta/Template/LO/bin/internal/Gridpack/run.sh	2015-04-24 16:53:27.000000001 +0200
@@ -78,37 +78,5 @@
     cd ..
 fi
 
-if [[ -e ./DECAY/decay ]]; then
-    cd DECAY
-    echo -$seed > iseed.dat
-    for ((i = 1 ;  i <= 20;  i++)) ; do
-	if [[ -e decay_$i\.in ]]; then
-	    echo "Decaying events..."
-	    mv ../events.lhe ../events_in.lhe
-	    ./decay < decay_$i\.in
-	fi
-    done
-    cd ..
-fi
-
-if [[ -e ./REPLACE/replace.pl ]]; then
-    for ((i = 1 ;  i <= 20;  i++)) ; do
-	if [[ -e ./REPLACE/replace_card$i\.dat ]];then
-	    echo "Adding flavors..."
-	    mv ./events.lhe ./events_in.lhe
-	    cd ./REPLACE
-	    ./replace.pl ../events_in.lhe ../events.lhe < replace_card$i\.dat
-	    cd ..
-	fi
-    done
-fi
-
-# part added by Stephen Mrenna to correct the kinematics of the replaced
-#  particles
-if [[ -e ./madevent/bin/internal/addmasses.py ]]; then
-  mv ./events.lhe ./events.lhe.0
-  python ./madevent/bin/internal/addmasses.py ./events.lhe.0 ./events.lhe
-fi  
-
 gzip -f events.lhe
 exit
